/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule RelayFragmentPointer
 * 
 * @typechecks
 */

'use strict';function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError('Cannot call a class as a function');}}















/**
 * Fragment pointers encapsulate the fetched data for a fragment reference. They
 * are opaque tokens that are used by Relay containers to read data that is then
 * passed to the underlying React component.
 *
 * @internal
 */var 
RelayFragmentPointer = (function () {



  /**
   * Creates a valid prop value to be passed into the top-level Relay container.
   */RelayFragmentPointer.
  createForRoot = function createForRoot(
  store, 
  query) 
  {
    var fragment = getRootFragment(query);
    if (!fragment) {
      return null;}

    var fragmentHash = fragment.getConcreteNodeHash();
    var storageKey = query.getStorageKey();
    var identifyingArg = query.getIdentifyingArg();
    var identifyingArgValue = 
    identifyingArg && identifyingArg.value || null;
    if (Array.isArray(identifyingArgValue)) {
      var rootFragment = fragment; // for Flow
      return identifyingArgValue.map(function (singleIdentifyingArgValue) {
        var dataID = store.getDataID(storageKey, singleIdentifyingArgValue);
        if (!dataID) {
          return null;}

        return require('RelayRecord').createWithFields(dataID, _defineProperty({}, 
        fragmentHash, new RelayFragmentPointer([dataID], rootFragment)));});}



    require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/fbjs/lib/invariant')(
    typeof identifyingArgValue === 'string' || identifyingArgValue == null, 
    'RelayFragmentPointer: Value for the argument to `%s` on query `%s` ' + 
    'should be a string, but it was set to `%s`. Check that the value is a ' + 
    'string.', 
    query.getFieldName(), 
    query.getName(), 
    identifyingArgValue);

    var dataIDOrIDs = store.getDataID(storageKey, identifyingArgValue);
    if (!dataIDOrIDs) {
      return null;}

    // TODO(t7765591): Throw if `fragment` is not optional.
    return _defineProperty({}, 
    fragmentHash, new RelayFragmentPointer(dataIDOrIDs, fragment));};



  function RelayFragmentPointer(
  dataIDOrIDs, 
  fragment) 
  {_classCallCheck(this, RelayFragmentPointer);
    var isArray = Array.isArray(dataIDOrIDs);
    var isPlural = fragment.isPlural();
    require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/fbjs/lib/invariant')(
    isArray === isPlural, 
    'RelayFragmentPointer: Wrong plurality, %s supplied with %s fragment.', 
    isArray ? 'array of data IDs' : 'single data ID', 
    isPlural ? 'plural' : 'non-plural');


    this._dataIDOrIDs = dataIDOrIDs;
    this._fragment = fragment;}


  /**
   * Get the data ID for a singular query fragment.
   */RelayFragmentPointer.prototype.
  getDataID = function getDataID() {
    require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/fbjs/lib/invariant')(
    !Array.isArray(this._dataIDOrIDs), 
    'RelayFragmentPointer.getDataID(): Bad call for plural fragment.');

    return this._dataIDOrIDs;};


  /**
   * Get the data ID for a plural query fragment.
   */RelayFragmentPointer.prototype.
  getDataIDs = function getDataIDs() {
    require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/fbjs/lib/invariant')(
    Array.isArray(this._dataIDOrIDs), 
    'RelayFragmentPointer.getDataIDs(): Bad call for non-plural fragment.');

    return this._dataIDOrIDs;};RelayFragmentPointer.prototype.


  getFragment = function getFragment() {
    return this._fragment;};RelayFragmentPointer.prototype.


  equals = function equals(that) {
    return (
      require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/fbjs/lib/shallowEqual')(this._dataIDOrIDs, that._dataIDOrIDs) && 
      this._fragment.isEquivalent(that._fragment));};



  /**
   * @unstable
   *
   * For debugging only, do not rely on this for comparing values at runtime.
   */RelayFragmentPointer.prototype.
  toString = function toString() {
    return (
      'RelayFragmentPointer(ids: ' + 
      JSON.stringify(this._dataIDOrIDs) + 
      ', fragment: `' + 
      this.getFragment().getDebugName() + 
      ', params: ' + 
      JSON.stringify(this._fragment.getVariables()) + 
      ')');};return RelayFragmentPointer;})();




function getRootFragment(query) {
  var batchCall = query.getBatchCall();
  if (batchCall) {
    require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/fbjs/lib/invariant')(
    false, 
    'Queries supplied at the root cannot have batch call variables. Query ' + 
    '`%s` has a batch call variable, `%s`.', 
    query.getName(), 
    batchCall.refParamName);}


  var fragment;
  query.getChildren().forEach(function (child) {
    if (child instanceof require('RelayQuery').Fragment) {
      require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/fbjs/lib/invariant')(
      !fragment, 
      'Queries supplied at the root should contain exactly one fragment ' + 
      '(e.g. `${Component.getFragment(\'...\')}`). Query `%s` contains ' + 
      'more than one fragment.', 
      query.getName());

      fragment = child;} else 
    if (child instanceof require('RelayQuery').Field) {
      require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/fbjs/lib/invariant')(
      child.isGenerated(), 
      'Queries supplied at the root should contain exactly one fragment ' + 
      'and no fields. Query `%s` contains a field, `%s`. If you need to ' + 
      'fetch fields, declare them in a Relay container.', 
      query.getName(), 
      child.getSchemaName());}});



  return fragment;}


module.exports = RelayFragmentPointer;